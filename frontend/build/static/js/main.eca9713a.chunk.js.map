{"version":3,"sources":["components/UploadModal.js","components/NavigationBar.js","components/EthAccountBar.js","components/MediaCard.js","Seed_IPFS_List.js","web3-helpers.js","App.js","reportWebVitals.js","index.js"],"names":["UploadModal","showModal","toggleUploadModal","uploadFileToIPFS","useState","fileName","setFileName","fileType","setFileType","fileDescription","setFileDescription","fileToUpload","setFileToUpload","buffer","setBufferToUpload","tags","setTags","Dialog","className","Header","closeButton","onHide","Title","Body","Group","Label","Control","onChange","e","name","target","value","length","type","placeholder","description","map","tag","index","variant","onClick","filter","indexOf","removeTags","disabled","style","border","onKeyUp","event","key","trim","includes","addTags","marginTop","File","accept","files","file","typeOfFile","match","reader","window","FileReader","readAsArrayBuffer","onloadend","Buffer","result","display","label","role","animation","Footer","preventDefault","fileData","backgroundColor","NavigationBar","searchIPFS","searchTerm","searchText","setSearchText","id","InputGroup","inline","FormControl","Append","htmlFor","EthAccountBar","userAccount","showCopiedToClipboard","setC2Clipboard","setTimeout","navigator","clipboard","writeText","Alert","color","fontSize","fontWeight","size","string","href","MediaCard","idx","media","Card","Img","src","ipfsHash","open","width","height","controls","split","alt","loading","Spinner","error","cardContent","cursor","padding","Badge","seedList","loadWeb3","a","ethereum","web3","Web3","enable","currentProvider","getAccount","eth","getAccounts","account","getFileTransferContract","net","getId","networkId","networkData","FileTransferContract","networks","fileTransferContract","Contract","abi","address","getInbox","contract","ipfs","ipfsClient","host","port","protocol","App","setAccount","setContract","yourFiles","setYourFiles","skejjFiles","setSkejjFiles","setSearchTerm","setShowModal","useEffect","ipfsInbox","console","log","add","path","filteredFiles","Object","values","some","keys","join","String","Jumbotron","fluid","Container","maxWidth","marginBottom","JSON","stringify","margin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eca9713a.chunk.js","sourcesContent":["    \r\nimport { Modal, Form, Alert, Spinner, Badge } from 'react-bootstrap'\r\nimport { useState } from 'react'\r\nimport './UploadModal.css'\r\n\r\nexport const UploadModal = ({ showModal, toggleUploadModal, uploadFileToIPFS }) =>{\r\n    const [ fileName, setFileName ] = useState('')\r\n    const [ fileType, setFileType ] = useState('')\r\n    const [ fileDescription, setFileDescription ] = useState('')\r\n    const [ fileToUpload, setFileToUpload ] = useState(null)\r\n    const [ buffer, setBufferToUpload ] = useState(null)\r\n    const [tags, setTags] = useState([]);\r\n\r\n    const changefileDescription = (e) =>{\r\n        const description = e.target.value\r\n        if(description && description.length < 150){\r\n            setFileDescription(description)\r\n        }\r\n    }\r\n\r\n    const changefileName = (e) =>{\r\n        const name = e.target.value\r\n        if(name.length < 50){\r\n            setFileName(name)\r\n        }\r\n    }\r\n\r\n    const getFileType = name =>{\r\n        if(!name) return ''\r\n        if(name.match(/(\\.jpg|\\.jpeg|\\.bmp|\\.gif|\\.png)$/i)){\r\n            return 'image'\r\n        } else if(name.match(/(\\.avi|\\.wmv|\\.flv|\\.mpg|\\.mpeg|\\.mp4)$/i)){\r\n            return 'video';\r\n        } else if(name.match(/(\\.wav|\\.mp3)$/i)){\r\n            return 'audio'\r\n        }\r\n        return ''\r\n    }\r\n\r\n    const handleFileSelect = (event)=>{\r\n        const [ file ] = event.target && event.target.files || []\r\n        const typeOfFile = getFileType(file && file.name)\r\n        if(file && typeOfFile){\r\n            setFileToUpload(file)\r\n            setFileType(typeOfFile)\r\n            const reader = new window.FileReader()\r\n            reader.readAsArrayBuffer(file)\r\n            reader.onloadend = () => {\r\n                setBufferToUpload(Buffer(reader.result))\r\n            }\r\n        } else {\r\n            setFileToUpload(null)\r\n            setBufferToUpload(null)\r\n        }\r\n    }\r\n\r\n    const addTags = event => {\r\n        const tag = event.target.value.trim()\r\n        if ((event.key === \"Enter\" ||event.key === \"Space\") && tag !== \"\" && !tags.includes(tag)) {\r\n            setTags([...tags, tag]);\r\n            event.target.value = \"\";\r\n        } else if (tags.includes(tag)){\r\n            event.target.value = \"\";\r\n        }\r\n    };\r\n\r\n    const removeTags = index => {\r\n        setTags([...tags.filter(tag => tags.indexOf(tag) !== index)]);\r\n    };\r\n\r\n    const handleFileUpload = (e)=>{\r\n        e.preventDefault()\r\n        const fileData = {\r\n            fileName,\r\n            fileType,\r\n            fileDescription,\r\n            fileToUpload,\r\n            buffer,\r\n            tags\r\n        }\r\n        toggleUploadModal()\r\n        setFileName('')\r\n        setFileType('')\r\n        setFileDescription('')\r\n        setFileToUpload(null)\r\n        setBufferToUpload(null)\r\n        setTags([])\r\n        uploadFileToIPFS(fileData)\r\n    }\r\n\r\n\r\n    return showModal ? \r\n        <Modal.Dialog className=\"upload_modal\">\r\n            <Modal.Header closeButton onHide={toggleUploadModal}>\r\n                <Modal.Title>Upload File to IPFS!</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group>\r\n                        {/* File Name Input */}\r\n                        <Form.Label className=\"input_label\">File Name:</Form.Label>\r\n                        <Form.Control onChange={changefileName}  type=\"text\" placeholder=\"File Name\" />\r\n                        {/* File Description*/}\r\n                        <Form.Label className=\"input_label\">File Description:</Form.Label>\r\n                        <textarea  onChange={changefileDescription} value={fileDescription}  type=\"text\" placeholder=\"File Description\" />\r\n                        {/* Tags Input */}\r\n                        <Form.Label className=\"input_label\">Add Tags:</Form.Label>\r\n                        <div className=\"tags-input\">\r\n                            <ul className=\"tag_list\">\r\n                                {tags.map((tag, index) => (\r\n                                    <li key={index} className=\"tag\">\r\n                                    <Badge  variant=\"secondary\"> \r\n                                        {tag}\r\n                                        <span className=\"remove_tag\" onClick={() => removeTags(index)} >(x)</span>\r\n                                    </Badge>\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                            <input\r\n                                type=\"text\"\r\n                                disabled={tags && tags.length > 10}\r\n                                style={tags && tags.length > 10? {border: '1px solid grey'} : {}}\r\n                                onKeyUp={event => event.key === \"Enter\" ? addTags(event) : null}\r\n                                placeholder=\"Press enter to add tags\"\r\n                            />\r\n                        </div>\r\n                        {\r\n                            tags && tags.length > 10?\r\n                            <Alert style={{marginTop: 10}} variant={'warning'}>\r\n                                only ten tags allowed per file\r\n                            </Alert>   \r\n                            : ''\r\n                        } \r\n                        {/* File Browser Input */}\r\n                        <Form.Label className=\"input_label\">File To Upload:</Form.Label>\r\n                        <label className=\"file_input\">\r\n                            <Form.File accept=\"audio/*,video/*,image/*\" onChange={handleFileSelect} style={{display: 'none'}} label=\"\"/>\r\n                            <div role=\"button\" className=\"select_file\"> SELECT FILE </div>\r\n                            { fileToUpload && fileToUpload.name && !buffer ?\r\n                            <Spinner animation=\"border\" role=\"status\">\r\n                                <span className=\"sr-only\">Loading...</span>\r\n                            </Spinner> : ''\r\n                            }\r\n                            <div className='file_input_name'> {fileToUpload && fileToUpload.name || \"NO FILE SELECTED\"} </div>\r\n                        </label>\r\n                    </Form.Group>\r\n                </Form>\r\n\r\n                {\r\n                !fileName ||!fileName.length > 8 || !buffer || !buffer.length?\r\n                 <Alert variant={'warning'}>\r\n                    Please add name and select file before uploading!\r\n                 </Alert>   \r\n                 : ''\r\n                } \r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n                <button onClick={toggleUploadModal} className=\"close_btn\">Close</button>\r\n                <button \r\n                    onClick={handleFileUpload}\r\n                    disabled={!fileName ||!fileName.length > 8 || !buffer || !buffer.length}\r\n                    style={!fileName ||!fileName.length > 8 || !buffer || !buffer.length? { backgroundColor: 'lightgrey'} : {}}\r\n                    className=\"secondary\">Upload\r\n                </button>\r\n            </Modal.Footer>\r\n        </Modal.Dialog> :\r\n        ''\r\n}\r\n    ","\r\nimport { InputGroup, FormControl} from 'react-bootstrap'\r\nimport { useState } from 'react'\r\nimport './NavigationBar.css'\r\n\r\nexport const NavigationBar = function ({ searchIPFS, toggleUploadModal, searchTerm }){\r\n    const [ searchText, setSearchText ] = useState('')\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        setSearchText('')\r\n        searchIPFS(searchText)\r\n    }\r\n\r\n    return (\r\n        <nav className=\"nav\">\r\n            {/* <a href=\"#\" class=\"logo\">\r\n                <img src=\"images/logo.png\"/>\r\n            </a> */}\r\n            <h1> SKEJJ </h1>\r\n            <input className=\"menu-btn\" type=\"checkbox\" id=\"menu-btn\"/>\r\n            <InputGroup className=\"search_box\" inline>\r\n                <FormControl \r\n                    onChange={e => {setSearchText(e.target.value)}} \r\n                    value={searchText} type=\"text\"\r\n                    className=\"search_input\" \r\n                    placeholder=\"Search IPFS...\" />\r\n                <InputGroup.Append onClick={handleSubmit} >\r\n                   <button\r\n                    className=\"search_btn\" \r\n                    variant=\"outline-primary\">\r\n                        SEARCH\r\n                   </button>\r\n                </InputGroup.Append>\r\n            </InputGroup>\r\n            <label className=\"menu-icon\" htmlFor=\"menu-btn\">\r\n                <span className=\"nav-icon\"></span>\r\n            </label>\r\n            <ul className=\"menu\">\r\n                <li >\r\n                    <button \r\n                        onClick={() => {searchIPFS('image')}} \r\n                        className={searchTerm ==='image'? 'search_filter' :''}>\r\n                            Images\r\n                    </button>\r\n                </li>\r\n                <li>\r\n                    <button \r\n                        className={searchTerm ==='video'? 'search_filter' :''} \r\n                        onClick={() => {searchIPFS('video')}}>\r\n                        Video\r\n                    </button>\r\n                </li>\r\n                <li>\r\n                    <button onClick={() => {searchIPFS('audio')}}\r\n                     className={searchTerm ==='audio'? 'search_filter' :''}>\r\n                        Audio\r\n                    </button>\r\n                </li>\r\n                <li >\r\n                    <button \r\n                        onClick={() => {searchIPFS('')}} \r\n                        className={searchTerm ==='' ? 'search_filter' :''}>\r\n                            All media\r\n                    </button>\r\n                </li>\r\n                <li ><button className=\"upload_button\" onClick={toggleUploadModal}>UPLOAD</button></li>\r\n            </ul>\r\n        </nav>\r\n  )\r\n}","import './EthAccountBar.css'\r\nimport Identicon from 'react-identicons';\r\nimport { useState } from 'react'\r\nimport { Alert }  from 'react-bootstrap'\r\n\r\nexport const EthAccountBar = function ({ userAccount }){\r\n    const [showCopiedToClipboard, setC2Clipboard] = useState(false)\r\n    const copyToClipboard = () => {\r\n        setC2Clipboard(true)\r\n        window.setTimeout(() => { setC2Clipboard(false)}, 2000)\r\n        navigator.clipboard.writeText(userAccount)\r\n    }\r\n\r\n    return (\r\n        <div className=\"eth_account\" onClick={copyToClipboard} >\r\n            {showCopiedToClipboard? <Alert className=\"hide-mobile\" style={{ color: 'white', fontSize:'small', fontWeight: 'bold'}}>copied to clipboard!</Alert> : ''}\r\n            <Alert variant={!userAccount? 'danger' : 'light'}>\r\n                 {userAccount ? \r\n                 <span className=\"account_details\">\r\n                    <span className=\"account_label\">ETH ACCOUNT:</span>     \r\n                    <Identicon size=\"15\" string={userAccount}/>\r\n                     {userAccount}\r\n                 </span> :\r\n                 <span>\r\n                    Not connected to ETH blockchain try \r\n                    <a href=\"https://metamask.io\"> Metamask </a>\r\n                 </span>                   \r\n                 }\r\n            </Alert> \r\n        </div>\r\n  )\r\n}","import { Card, Badge, Spinner } from 'react-bootstrap'\r\nimport { useState } from 'react'\r\nimport './MediaCard.css'\r\n \r\nexport const MediaCard = ({ file, idx }) =>{\r\n    const [showCopiedToClipboard, setC2Clipboard] = useState(false)\r\n\r\n    const media = (\r\n        file.fileType === 'image'?\r\n            <Card.Img variant=\"top\" \r\n                src={`https://ipfs.infura.io/ipfs/${file.ipfsHash}`}\r\n                onClick={() => {window.open(`https://ipfs.infura.io/ipfs/${file.ipfsHash}`)}}    \r\n            /> :\r\n        file.fileType === 'video'?\r\n            <video width=\"320\" height=\"240\" controls\r\n                onClick={() => {window.open(`https://ipfs.infura.io/ipfs/${file.ipfsHash}`)}}\r\n            >\r\n            <source src={`https://ipfs.infura.io/ipfs/${file.ipfsHash}`} type={`video/${file.fileToUpload.name.split('.')[1]}`}/>\r\n            Your browser does not support the video tag.\r\n            </video>: \r\n        file.fileType === 'audio'?\r\n        <div className=\"audio_card\">\r\n            <img height=\"150\"\r\n                src=\"https://ipfs.infura.io/ipfs/QmZd37ntfCcK5ap6Hk7fyEY4KMWmghogwiTudYnZaTvXeV\" \r\n                alt=\"audio_file_icon\"\r\n                onClick={() => {window.open(`https://ipfs.infura.io/ipfs/${file.ipfsHash}`)}}\r\n            >\r\n            </img>\r\n            <audio controls>\r\n                <source src={`https://ipfs.infura.io/ipfs/${file.ipfsHash}`} type={`audio/${file.fileToUpload.name.split('.')[1]}`}/>\r\n                Your browser does not support the audio element.\r\n            </audio>\r\n        </div>\r\n        : '')\r\n\r\n     \r\n    const loading = (<div>\r\n            <img height=\"250\" width=\"250\" src=\"https://ipfs.infura.io/ipfs/QmXCr2VdA11tDTfULQH8i6xsGrHsYH5KqNgaXHMTsFhu2v\"></img>\r\n            <h4>Uploading {file.fileName} to IPFS!</h4>\r\n            <Spinner animation=\"border\" role=\"status\"></Spinner>\r\n        </div>)\r\n\r\n    const error = (\r\n        (<div className=\"upload_error\">\r\n            <img height=\"250\" width=\"250\" src=\"https://ipfs.infura.io/ipfs/QmXCr2VdA11tDTfULQH8i6xsGrHsYH5KqNgaXHMTsFhu2v\"></img>\r\n            <h4>Error uploading to IPFS!</h4>\r\n        </div>)\r\n    )\r\n\r\n    const cardContent = !file.ipfsHash? loading : file.ipfsHash === 'error'? error : media\r\n\r\n    const copyToClipboard = () => {\r\n        setC2Clipboard(true)\r\n        window.setTimeout(() => { setC2Clipboard(false)}, 2000)\r\n        navigator.clipboard.writeText(file.ipfsHash)\r\n    }\r\n        \r\n\r\n    return <Card style={{ width: '18rem', cursor: 'pointer' }} key={idx} >\r\n        <ul style={{padding: 10}}>\r\n            {cardContent}\r\n            <li><b>Name: </b> {file.fileName} </li>\r\n            <li><b>Description: </b> {file.fileDescription} </li>\r\n            <ul className=\"tag_list\">\r\n            {file.tags.map((tag, index) => (\r\n                <li className=\"tag\">\r\n                <Badge key={index} variant=\"secondary\"> \r\n                    {tag}\r\n                </Badge>\r\n                </li>\r\n            ))}\r\n            </ul>\r\n            <li className=\"ipfs_cid\" onClick={copyToClipboard} >\r\n                <img height=\"15\" width=\"15\" src=\"https://ipfs.infura.io/ipfs/QmXCr2VdA11tDTfULQH8i6xsGrHsYH5KqNgaXHMTsFhu2v\"></img>\r\n                <b>IPFS CID: </b> \r\n                <span id={`${file.fileName}-cid`} >\r\n                    {file.ipfsHash}\r\n                </span>\r\n            </li>\r\n            <div style={{ color: '#5976FD', fontSize:'small'}}> {showCopiedToClipboard? \"copied to clipboard!\" : ''}</div>\r\n           \r\n        </ul>\r\n    </Card>}","export const seedList = [\r\n    {       \r\n        fileName: \"Spearhead Mountains\",\r\n        fileType: \"image\",\r\n        fileDescription: \"Photo of the mountains along the spearhead traverse between Whistler and Blackcomb, British Colombia, Canada\",\r\n        fileToUpload: {\r\n            name: \"BC_Spearhead__014.jpg\",\r\n        },\r\n        tags: [\r\n            \"mountains\",\r\n            \"ski\",\r\n            \"bc\",\r\n            \"canada\",\r\n            \"british columbia\",\r\n            \"snow\",\r\n            \"landscape\",\r\n            \"photography\"\r\n        ],\r\n        ipfsHash: \"Qme5AVJFWVAe9ATMvfkduJtzRc9P8Krujz9LEqrZKYUagD\"\r\n    },\r\n    {       \r\n        fileName: \"Desert Startrails\",\r\n        fileType: \"video\",\r\n        fileDescription: \"A timelapse of the milky way while camping near Moab, Utah. This timelapse spans 4 hours of night sky.\",\r\n        fileToUpload: {\r\n            name: \"Startrails.mp4\",\r\n        },\r\n        tags: [\r\n            \"desert\",\r\n            \"stars\",\r\n            \"utah\",\r\n            \"timelapse\",\r\n            \"nightsky\",\r\n            \"landscape\",\r\n            \"video\",\r\n            \"camping\",\r\n            \"outdoors\"\r\n        ],\r\n        ipfsHash: \"QmdxgyYng98FCgKFmQQaQPAaTqupgWTLSo8TTXCWVt8Zcd\"\r\n    },\r\n    {       \r\n        fileName: \"JFK Space Race Speech\",\r\n        fileType: \"audio\",\r\n        fileDescription: \"'We choose to go to the Moon' is a speech delivered by United States President John F. Kennedy about the effort to reach the Moon at Rice Stadium in Houston, Texas, on September 12, 1962 - Wikipedia\",\r\n        fileToUpload: {\r\n            name: \"322026__cityrocker__jfk-space-race-speech.mp3\",\r\n        },\r\n        tags: [\r\n            \"speech\",\r\n            \"space\",\r\n            \"race\",\r\n            \"jfk\",\r\n            \"kennedy\",\r\n            \"public\",\r\n            \"domain\"\r\n        ],\r\n        ipfsHash: \"QmWYayUKS5FMjGGUQfZKTYyxhGdsR6dP8pKte7ehKKv9Vm\"\r\n    },\r\n    {       \r\n        fileName: \"Don Quixote in the 20th Century\",\r\n        fileType: \"image\",\r\n        fileDescription: \"(c 1905) These colorful chromolithograph postcards by the Spanish cartoonist Pedro de Rojas reimagine the adventures of Don Quixote and Sancho Panza for the twentieth century. We see the Knight of the Melancholy Countenance ballooning into windmills, fighting with what appears to be a park ranger \",\r\n        fileToUpload: {\r\n            name: \"BC_Spearhead__014.jpg\",\r\n        },\r\n        tags: [\r\n            \"Quixote\",\r\n            \"1905\",\r\n            \"illustration\",\r\n            \"public domain\",\r\n            \"public\",\r\n            \"cartoon\",\r\n            \"de Rojas\"\r\n        ],\r\n        ipfsHash: \"QmZibrTsEqdYMR8qcv5xkhRUHNUvq2ny41tvji3y4oyYNt\"\r\n    },\r\n]","// import FileTransferContract from './ABIs/FileTransfer.json'\r\nimport Web3 from  'web3'\r\nimport FileTransferContract from './ABIs/FileTransfer'\r\n\r\n\r\nexport const loadWeb3 = async () => {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\nexport const getAccount = async () =>{\r\n    const web3 = window.web3\r\n    // Load account\r\n    const [ account ] = await web3.eth.getAccounts()\r\n    return account\r\n}\r\n\r\nexport const getFileTransferContract = async () => {\r\n    const web3 = window.web3\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = FileTransferContract.networks[networkId]\r\n    if(networkData) {\r\n      const fileTransferContract = new web3.eth.Contract(FileTransferContract.abi, networkData.address)\r\n      return fileTransferContract\r\n    } else {\r\n      // alert('contract not found on this network')\r\n      return null\r\n    }\r\n}\r\n\r\nexport const getInbox = async (contract) =>{\r\n}\r\n","\nimport ipfsClient from 'ipfs-http-client'\nimport { useEffect, useState } from 'react'\nimport { Jumbotron, Container, Button } from 'react-bootstrap'\nimport { UploadModal } from './components/UploadModal'\nimport { NavigationBar } from './components/NavigationBar'\nimport { EthAccountBar } from './components/EthAccountBar'\nimport { MediaCard } from './components/MediaCard'\nimport { seedList } from './Seed_IPFS_List.js'\nimport {loadWeb3, getAccount, getFileTransferContract, getInbox } from './web3-helpers.js'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n//Declare IPFS\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' })\n\nfunction App() {\n  const [ userAccount, setAccount ] = useState('')\n  const [ fileTransferContract, setContract ] = useState(null)\n  const [ yourFiles, setYourFiles ] = useState([])\n  const [ skejjFiles, setSkejjFiles ] = useState(seedList)\n  const [ searchTerm, setSearchTerm ] = useState('')\n  const [ inbox, setInbox ] = useState({})\n  const [ showModal, setShowModal ] = useState(false)\n\n  // Initial application state\n  useEffect(async () => {\n    await loadWeb3()\n    const account = await getAccount()\n    const contract = await getFileTransferContract()\n    const ipfsInbox =  await getInbox()\n    setAccount(account)\n    setContract(contract)\n    setContract(ipfsInbox)\n  }, [window.web3]);\n\n  const searchIPFS = (searchTerm) => {\n    setSearchTerm(String(searchTerm).trim())\n  }\n\n  const toggleUploadModal = () => {\n    setShowModal(!showModal)\n  }\n\n  const uploadFileToIPFS = async (fileData) => {\n    const { buffer } = fileData\n    console.log('Uploading file to IPFS....', 'file name:', fileData.fileName)\n    // add ui elements to show this is happening behind the scenes\n    setYourFiles([...yourFiles, fileData])\n    try{\n      const result = await ipfs.add(buffer)\n      fileData.ipfsHash = result.path\n      setYourFiles([...yourFiles, fileData])\n    } catch (err){\n      console.error('Error uploading to IPFS', err)\n      fileData.ipfsHash = 'error'\n      setYourFiles([...yourFiles, fileData])\n    }\n  }\n\n  const sendToSkejj = () =>{\n    console.log(JSON.stringify(yourFiles[0]))\n    setSkejjFiles([...yourFiles, ...skejjFiles])\n    setYourFiles([])\n  } \n\n  const filteredFiles = skejjFiles.filter(\n    file => Object.values(file).some(value => {\n      return typeof value == 'object'? Object.keys(value).join(\" \").includes(searchTerm) : value.includes(searchTerm)\n    }))\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <NavigationBar searchIPFS={searchIPFS} searchTerm={searchTerm} toggleUploadModal={toggleUploadModal}></NavigationBar>\n      </header>\n      <UploadModal uploadFileToIPFS={uploadFileToIPFS} showModal={showModal} toggleUploadModal={toggleUploadModal}></UploadModal>\n      <main >\n        <div className={showModal? 'modal_overlay' : ''}></div>\n        <EthAccountBar userAccount={userAccount}></EthAccountBar>\n        <Jumbotron fluid>\n          <Container className=\"media_window\">\n            <h2>CONTENT LISTED ON SKEJJ</h2>\n            <div className=\"gallery\">\n            {filteredFiles && filteredFiles.length? \n              filteredFiles.map((file, idx) =>(\n                <MediaCard file={file} idx={idx}></MediaCard>\n              )):\n              <p>\n                {searchTerm? `displaying medai related to ${searchTerm}` \n                : 'Currently no media to display from IPFS, please feel free to upload some of your own!.'}\n              </p>}\n            </div>\n          </Container>\n          <Container className=\"media_window\" style={{maxWidth: 300}}>\n          <h2>YOUR IPFS MEDIA</h2>\n          <button disabled={!yourFiles.length} style={!yourFiles.length ? {backgroundColor:  'grey' }: { marginBottom: 10 }} onClick={sendToSkejj}>List with Skejj</button>\n            {yourFiles && yourFiles.length? \n              yourFiles.map((file, idx) =>(\n                <MediaCard file={file} idx={idx}></MediaCard>\n              )):\n              <div style={{margin: 15}}>\n                Currently no media to display from IPFS, please feel free to upload some of your own!.\n              </div>}\n          </Container>\n        </Jumbotron>\n        </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}